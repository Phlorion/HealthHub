package com.example.healthhub.AI;

import java.util.ArrayList;
import java.util.List;

public class IntentDispatcher {
    private List<IntentHandler> handlers;
    private AppActionSpeaker speaker; // This will be dynamically set by AIManager

    /**
     * Constructor for IntentDispatcher.
     * @param speaker The initial AppActionSpeaker (can be null initially, set later via setSpeaker()).
     */
    public IntentDispatcher(AppActionSpeaker speaker) {
        this.speaker = speaker;
        this.handlers = new ArrayList<>();
        // Register your handlers here. Order matters: more specific handlers first,
        // general/fallback handlers last (like UnknownIntentHandler).
        registerHandler(new HomeNavigationIntentHandler());
        registerHandler(new NearbyHealthFacilitiesIntentHandler());
        registerHandler(new UnknownIntentHandler()); // Always register this last as a fallback
    }

    /**
     * Sets or updates the AppActionSpeaker instance. This is crucial for directing
     * UI/TTS feedback to the currently active Activity/Fragment.
     * @param speaker The current AppActionSpeaker (e.g., an Activity).
     */
    public void setSpeaker(AppActionSpeaker speaker) {
        this.speaker = speaker;
    }

    /**
     * Registers an IntentHandler with the dispatcher.
     * @param handler The IntentHandler to register.
     */
    public void registerHandler(IntentHandler handler) {
        handlers.add(handler);
    }

    /**
     * Dispatches a ParsedNLUResult to the first IntentHandler that can handle it.
     * @param parsedResult The structured result from the NLU model.
     * @return The response string generated by the handling IntentHandler.
     */
    public String dispatch(ParsedNLUResult parsedResult) {
        if (parsedResult == null) {
            System.out.println("ParsedNLUResult is null. Cannot dispatch intent.");
            if (speaker != null) speaker.showToast("Internal error: AI parsing failed.");
            return "An internal error occurred during processing.";
        }

        String intentName = parsedResult.intent;

        for (IntentHandler handler : handlers) {
            if (handler.canHandle(intentName)) {
                System.out.println("Handling intent: " + intentName);
                // Pass the current speaker to the handler
                return handler.handleIntent(parsedResult, speaker);
            }
        }

        // This line should ideally not be reached if UnknownIntentHandler is registered last
        // and handles all remaining cases (including "unknown" intent from parser).
        System.out.println("No handler found for intent: " + intentName);
        if (speaker != null) speaker.showToast("No specific handler found for your request.");
        return "An internal error occurred. No specific handler found for your request.";
    }
}
